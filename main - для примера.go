package main

import (
	"log"
	"net/http"
	"fmt"
	"strconv"
)
// Обработчик главной страницы.
// Создается функция-обработчик "home", которая записывает байтовый слайс, 
// содержащий текст "Привет из Snippetbox" как тело ответа.
func home(w http.ResponseWriter, r *http.Request) {
	// Проверяется, если текущий путь URL запроса точно совпадает с шаблоном "/". 
	// Если нет, вызывается функция http.NotFound() для возвращения клиенту ошибки 404.
	// Важно, чтобы мы завершили работу обработчика через return. 
	// Если мы забудем про "return", то обработчик продолжит работу и выведет сообщение "Привет из SnippetBox" как ни в чем не бывало.
	if r.URL.Path != "/" {
		http.NotFound(w, r)
		return
	}
	w.Write([]byte("Привет из Snippetbox"))
}
// Обработчик для отображения содержимого заметки.
func snowSnippet(w http.ResponseWriter, r *http.Request) {
	// Извлекаем значение параметра id из URL и попытаемся 
    // конвертировать строку в integer используя функцию strconv.Atoi(). Если его нельзя
    // конвертировать в integer, или значение меньше 1, возвращаем ответ
    // 404 - страница не найдена!
	id, err := strconv.Atoi(r.URL.Query().Get("id"))
	if err != nil || id < 1 {
		http.NotFound(w, r)
		return
	}
	// Используем функцию fmt.Fprintf() для вставки значения из id в строку ответа
    // и записываем его в http.ResponseWriter.
	fmt.Fprintf(w, "Отображение выбранной заметки с ID %d...", id)
	// w.Write([]byte("Отображение заметки..."))

}
// Обработчик для создания новой заметки.
func createSnippet(w http.ResponseWriter, r *http.Request) {
	// Используем r.Method для проверки, использует ли запрос метод POST или нет. 
	// Обратите внимание, что http.MethodPost является строкой и содержит текст "POST".
	if r.Method != http.MethodPost {
		// Используем метод Header().Set() для добавления заголовка 'Allow: POST' в
        // карту HTTP-заголовков. Первый параметр - название заголовка, а
        // второй параметр - значение заголовка.
		w.Header().Set("Allow", http.MethodPost)
		// Используем функцию http.Error() для отправки кода состояния 405 с соответствующим сообщением.
		http.Error(w, "Метод запрещен!", 405)
		/* Ранее, мы использовали методы w.Write() и w.WriteHeader() напрямую, но на практике так делают довольно редко:
		// Если это не так, то вызывается метод w.WriteHeader() для возвращения статус-кода 405
        // и вызывается метод w.Write() для возвращения тела-ответа с текстом "Метод запрещен".
        // Затем мы завершаем работу функции вызвав "return", чтобы
        // последующий код не выполнялся.
		w.WriteHeader(405)
		w.Write([]byte("GET-Метод запрещен!"))
		*/
		// Затем мы завершаем работу функции вызвав "return", чтобы
        // последующий код не выполнялся.
		return
	}
	w.Write([]byte("Форма для создания новой заметки..."))
}
func main(){
	// Используется функция http.NewServeMux() для инициализации нового рутера, затем
    // функция "home" регистрируется как обработчик для URL-шаблона "/".
	mux := http.NewServeMux()
	mux.HandleFunc("/", home)
	// Регистрируем два новых обработчика и соответствующие URL-шаблоны в
	// маршрутизаторе servemux
	mux.HandleFunc("/snippet", snowSnippet)
	mux.HandleFunc("/snippet/create", createSnippet)
	// Используется функция http.ListenAndServe() для запуска нового веб-сервера. 
    // Мы передаем два параметра: TCP-адрес сети для прослушивания (в данном случае это "localhost:4000")
    // и созданный рутер. Если вызов http.ListenAndServe() возвращает ошибку
    // мы используем функцию log.Fatal() для логирования ошибок. Обратите внимание
    // что любая ошибка, возвращаемая от http.ListenAndServe(), всегда non-nil.
	log.Println("Запуск веб-сервера на http://127.0.0.1:4000")
	// Сетевой TCP-адрес, который передается в http.ListenAndServe(), должен быть в формате "host:port". 
	// Если не указать хост (как мы сделали с ":4000"), сервер будет прослушивать 
	// все доступные сетевые интерфейсы вашего компьютера. 
	err := http.ListenAndServe(":4000", mux)
	log.Fatal(err)
	// На данный момент для запуска нашего приложения все три команды эквивалентны:
	// go run main.go
	// go run .
	// go run github.com/snippetbox
}