// задача по вычислению объема краски для покраски стен, 1 л краски расчитан на 10м2
package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
)

var metersPerLiter float64

// вынесли в отдельную функцию расчёт площади комнат
func paintNeeded(width float64, height float64) (float64, error) { //error - здесь это второе возвращаемое значение, которое сообщает, возникли ли ошибки при выполнении
	if width < 0 { //если ширина имеет недопустимое значение, вернуть 0 и признак ошибки
		return 0, fmt.Errorf("длина комнаты в %.2fм не допустима", width)
	}
	if height < 0 { //если высота имеет значение, вернуть 0 и признак ошибки
		return 0, fmt.Errorf("высота комнаты в %.2fм не допустима", height)
	}
	area := width * height
	return area / metersPerLiter, nil //возвращает расход краски и значение nil, которое указывает на отсутствие ошибок
}
func main() {
	var total float64
	metersPerLiter = 10                                //на столько хватает 1л краски (на 10м2)
	reader := bufio.NewReader(os.Stdin)                //создаём bufio.Reader для чтения ввода с клавиатуры
	fmt.Print("укажите количество стен для покраски:") // запрашиваем количество стен для покраски
	input, err := reader.ReadString('\n')              //прочитать данные, введенные пользователем до нажатия Enter
	if err != nil {                                    //если произошла ошибка, программа выводит сообщение и завершается, например ввели тип string
		log.Fatal(err)
	}
	input = strings.TrimSpace(input)  //удаление символа новой строки \n, табуляции \t, пробелов если они имеются
	guess, err := strconv.Atoi(input) //входная строка преобразуется в число типа int (для типа float64 используется функция ParseFloat)
	if err != nil {                   //если произошла ошибка, программа выводит сообщение и завершается, например ввели тип string
		log.Fatal(err)
	}
	for i := 1; i <= guess; i++ {
		// работа с первой стеной
		// запршиваем у пользователя ширину первой стены
		fmt.Print("Укажите ширину стены:")     //запрашиваем первое значение
		input1, err := reader.ReadString('\n') //прочитать данные, введенные пользователем до нажатия Enter
		if err != nil {                        //если произошла ошибка, программа выводит сообщение и завершается, например ввели тип string
			log.Fatal(err)
		}
		input1 = strings.TrimSpace(input1)            //удаление символа новой строки \n, табуляции \t, пробелов если они имеются
		guess1, err := strconv.ParseFloat(input1, 64) //входная строка преобразуется в число типа float64 (для типа int используется функция Atoi)
		if err != nil {                               //если произошла ошибка, программа выводит сообщение и завершается, например ввели тип string
			log.Fatal(err)
		}
		// запршиваем у пользователя высоту первой стены
		fmt.Print("Укажите высоту стены:")     //запрашиваем второе значение
		input2, err := reader.ReadString('\n') //прочитать данные, введенные пользователем до нажатия Enter
		if err != nil {                        //если произошла ошибка, программа выводит сообщение и завершается, например ввели тип string
			log.Fatal(err)
		}
		input2 = strings.TrimSpace(input2)            //удаление символа новой строки \n, табуляции \t, пробелов если они имеются
		guess2, err := strconv.ParseFloat(input2, 64) //входная строка преобразуется в число типа float64 (для типа int используется функция Atoi)
		// подставляем полученные значения в функцию paintNeeded
		amount, err := paintNeeded(guess1, guess2)
		if err != nil {
			log.Fatal(err) //выводим ошибку и прерываем выполнение программы (или nil, если ошибки не было)
		} else {
			fmt.Printf("%.2f литров краски необходимо для стены\n", amount) //вычисляем, сколько краски понадобится для этой площади
		}
		total += amount
	}

	// выводим общий расход по всем стенам
	fmt.Printf("Общее количество необходимой краски: %.2f литров\n", total)
}
